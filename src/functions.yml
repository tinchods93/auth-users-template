registerUser:
  handler: src/infrastructure/primary/handlers/registerUser.handler
  description: 'Register a new user'
  name: ${file(resources/index.json):functions.registerUserAction}
  timeout: 25
  logRetentionInDays: 14
  iamRoleStatementsInherit: true
  iamRoleStatementsName: ${file(resources/index.json):functions.registerUserAction}
  iamRoleStatements: ${file(resources/iamRoleStatements/registerUserAction.yml)}
  provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}
  events:
    - httpApi:
        path: /users/signup
        method: post
        cors: true

loginUser:
  handler: src/infrastructure/primary/handlers/loginUser.handler
  description: 'Register a new user'
  name: ${file(resources/index.json):functions.loginUserAction}
  timeout: 25
  logRetentionInDays: 14
  iamRoleStatementsInherit: true
  iamRoleStatementsName: ${file(resources/index.json):functions.loginUserAction}
  iamRoleStatements: ${file(resources/iamRoleStatements/loginUserAction.yml)}
  provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}
  events:
    - httpApi:
        path: /users/signin
        method: post
        cors: true

newPasswordChallenge:
  handler: src/infrastructure/primary/handlers/newPasswordChallenge.handler
  description: 'Respond to new password challenge'
  name: ${file(resources/index.json):functions.newPasswordChallengeUserAction}
  timeout: 25
  logRetentionInDays: 14
  iamRoleStatementsInherit: true
  iamRoleStatementsName: ${file(resources/index.json):functions.newPasswordChallengeUserAction}
  iamRoleStatements: ${file(resources/iamRoleStatements/newPasswordChallengeUserAction.yml)}
  provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}
  events:
    - httpApi:
        path: /users/{username}/password
        method: put
        cors: true

forgotPassword:
  handler: src/infrastructure/primary/handlers/forgotPassword.handler
  description: 'Forgot password user action'
  name: ${file(resources/index.json):functions.forgotPasswordUserAction}
  timeout: 25
  logRetentionInDays: 14
  iamRoleStatementsInherit: true
  iamRoleStatementsName: ${file(resources/index.json):functions.forgotPasswordUserAction}
  iamRoleStatements: ${file(resources/iamRoleStatements/forgotPasswordUserAction.yml)}
  provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}
  events:
    - httpApi:
        path: /users/{username}/password/forgot
        method: post
        cors: true

confirmForgotPassword:
  handler: src/infrastructure/primary/handlers/confirmForgotPassword.handler
  description: 'Confirm forgot password user action'
  name: ${file(resources/index.json):functions.confirmForgotPasswordUserAction}
  timeout: 25
  logRetentionInDays: 14
  iamRoleStatementsInherit: true
  iamRoleStatementsName: ${file(resources/index.json):functions.confirmForgotPasswordUserAction}
  iamRoleStatements: ${file(resources/iamRoleStatements/confirmForgotPasswordUserAction.yml)}
  provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:provider.stage}, 0}
  events:
    - httpApi:
        path: /users/{username}/password/forgot/confirm
        method: post
        cors: true